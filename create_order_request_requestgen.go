// Code generated by "requestgen -method POST -url /v2/orders -type CreateOrderRequest -responseType Order"; DO NOT EDIT.

package alpacaapi

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/c9s/bbgo/pkg/fixedpoint"
	"net/url"
	"reflect"
	"regexp"
)

// SetSymbol sets
func (c *CreateOrderRequest) SetSymbol(Symbol string) *CreateOrderRequest {
	c.Symbol = Symbol
	return c
}

// SetQty sets
func (c *CreateOrderRequest) SetQty(Qty fixedpoint.Value) *CreateOrderRequest {
	c.Qty = &Qty
	return c
}

// SetNotional sets
func (c *CreateOrderRequest) SetNotional(Notional fixedpoint.Value) *CreateOrderRequest {
	c.Notional = &Notional
	return c
}

// SetSide sets
func (c *CreateOrderRequest) SetSide(Side OrderSide) *CreateOrderRequest {
	c.Side = Side
	return c
}

// SetType sets
func (c *CreateOrderRequest) SetType(Type OrderType) *CreateOrderRequest {
	c.Type = Type
	return c
}

// SetTimeInForce sets
func (c *CreateOrderRequest) SetTimeInForce(TimeInForce OrderTimeInForce) *CreateOrderRequest {
	c.TimeInForce = TimeInForce
	return c
}

// SetLimitPrice sets
func (c *CreateOrderRequest) SetLimitPrice(LimitPrice fixedpoint.Value) *CreateOrderRequest {
	c.LimitPrice = &LimitPrice
	return c
}

// SetStopPrice sets
func (c *CreateOrderRequest) SetStopPrice(StopPrice fixedpoint.Value) *CreateOrderRequest {
	c.StopPrice = &StopPrice
	return c
}

// SetTrailPrice sets
func (c *CreateOrderRequest) SetTrailPrice(TrailPrice fixedpoint.Value) *CreateOrderRequest {
	c.TrailPrice = &TrailPrice
	return c
}

// SetTrailPercent sets
func (c *CreateOrderRequest) SetTrailPercent(TrailPercent fixedpoint.Value) *CreateOrderRequest {
	c.TrailPercent = &TrailPercent
	return c
}

// SetExtendedHours sets
func (c *CreateOrderRequest) SetExtendedHours(ExtendedHours bool) *CreateOrderRequest {
	c.ExtendedHours = ExtendedHours
	return c
}

// SetClientOrderID sets
func (c *CreateOrderRequest) SetClientOrderID(ClientOrderID string) *CreateOrderRequest {
	c.ClientOrderID = &ClientOrderID
	return c
}

// SetOrderClass sets
func (c *CreateOrderRequest) SetOrderClass(OrderClass OrderClass) *CreateOrderRequest {
	c.OrderClass = OrderClass
	return c
}

// SetLegs sets
func (c *CreateOrderRequest) SetLegs(Legs []Leg) *CreateOrderRequest {
	c.Legs = Legs
	return c
}

func (c *CreateOrderRequest) Addlegs(Legs ...Leg) *CreateOrderRequest {
	c.Legs = append(c.Legs, Legs...)
	return c
}

// SetTakeProfit sets
func (c *CreateOrderRequest) SetTakeProfit(TakeProfit TakeProfit) *CreateOrderRequest {
	c.TakeProfit = &TakeProfit
	return c
}

// SetStopLoss sets
func (c *CreateOrderRequest) SetStopLoss(StopLoss StopLoss) *CreateOrderRequest {
	c.StopLoss = &StopLoss
	return c
}

// SetPositionIntent sets
func (c *CreateOrderRequest) SetPositionIntent(PositionIntent PositionIntent) *CreateOrderRequest {
	c.PositionIntent = &PositionIntent
	return c
}

// SetAdvancedInstructions sets
func (c *CreateOrderRequest) SetAdvancedInstructions(AdvancedInstructions AdvancedInstruction) *CreateOrderRequest {
	c.AdvancedInstructions = &AdvancedInstructions
	return c
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (c *CreateOrderRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		if c.isVarSlice(_v) {
			c.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (c *CreateOrderRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check Symbol field -> json key symbol
	Symbol := c.Symbol

	// TEMPLATE check-required
	if len(Symbol) == 0 {
	}
	// END TEMPLATE check-required

	// assign parameter of Symbol
	params["symbol"] = Symbol
	// check Qty field -> json key qty
	if c.Qty != nil {
		Qty := *c.Qty

		// TEMPLATE check-required
		if Qty == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of Qty
		params["qty"] = Qty
	} else {
	}
	// check Notional field -> json key notional
	if c.Notional != nil {
		Notional := *c.Notional

		// TEMPLATE check-required
		if Notional == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of Notional
		params["notional"] = Notional
	} else {
	}
	// check Side field -> json key side
	Side := c.Side

	// TEMPLATE check-required
	if len(Side) == 0 {
		return nil, fmt.Errorf("side is required, empty string given")
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch Side {
	case "buy", "sell":
		params["side"] = Side

	default:
		return nil, fmt.Errorf("side value %v is invalid", Side)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of Side
	params["side"] = Side
	// check Type field -> json key type
	Type := c.Type

	// TEMPLATE check-required
	if len(Type) == 0 {
		return nil, fmt.Errorf("type is required, empty string given")
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch Type {
	case "market", "limit", "stop", "stop_limit", "trailing_stop":
		params["type"] = Type

	default:
		return nil, fmt.Errorf("type value %v is invalid", Type)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of Type
	params["type"] = Type
	// check TimeInForce field -> json key time_in_force
	TimeInForce := c.TimeInForce

	// TEMPLATE check-required
	if len(TimeInForce) == 0 {
		return nil, fmt.Errorf("time_in_force is required, empty string given")
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch TimeInForce {
	case "day", "gtc", "opg", "ioc", "fok", "cls":
		params["time_in_force"] = TimeInForce

	default:
		return nil, fmt.Errorf("time_in_force value %v is invalid", TimeInForce)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of TimeInForce
	params["time_in_force"] = TimeInForce
	// check LimitPrice field -> json key limit_price
	if c.LimitPrice != nil {
		LimitPrice := *c.LimitPrice

		// TEMPLATE check-required
		if LimitPrice == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of LimitPrice
		params["limit_price"] = LimitPrice
	} else {
	}
	// check StopPrice field -> json key stop_price
	if c.StopPrice != nil {
		StopPrice := *c.StopPrice

		// TEMPLATE check-required
		if StopPrice == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of StopPrice
		params["stop_price"] = StopPrice
	} else {
	}
	// check TrailPrice field -> json key trail_price
	if c.TrailPrice != nil {
		TrailPrice := *c.TrailPrice

		// TEMPLATE check-required
		if TrailPrice == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of TrailPrice
		params["trail_price"] = TrailPrice
	} else {
	}
	// check TrailPercent field -> json key trail_percent
	if c.TrailPercent != nil {
		TrailPercent := *c.TrailPercent

		// TEMPLATE check-required
		if TrailPercent == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of TrailPercent
		params["trail_percent"] = TrailPercent
	} else {
	}
	// check ExtendedHours field -> json key extended_hours
	ExtendedHours := c.ExtendedHours

	// TEMPLATE check-required
	// END TEMPLATE check-required

	// assign parameter of ExtendedHours
	params["extended_hours"] = ExtendedHours
	// check ClientOrderID field -> json key client_order_id
	if c.ClientOrderID != nil {
		ClientOrderID := *c.ClientOrderID

		// TEMPLATE check-required
		if len(ClientOrderID) == 0 {
		}
		// END TEMPLATE check-required

		// assign parameter of ClientOrderID
		params["client_order_id"] = ClientOrderID
	} else {
	}
	// check OrderClass field -> json key order_class
	OrderClass := c.OrderClass

	// TEMPLATE check-required
	if len(OrderClass) == 0 {
	}
	// END TEMPLATE check-required

	// TEMPLATE check-valid-values
	switch OrderClass {
	case "simple", "bracket", "oco", "oto", "mleg":
		params["order_class"] = OrderClass

	default:
		return nil, fmt.Errorf("order_class value %v is invalid", OrderClass)

	}
	// END TEMPLATE check-valid-values

	// assign parameter of OrderClass
	params["order_class"] = OrderClass
	// check Legs field -> json key legs
	Legs := c.Legs

	// TEMPLATE check-required
	// END TEMPLATE check-required

	// assign parameter of Legs
	if len(Legs) > 0 {
		params["legs"] = Legs
	}
	// check TakeProfit field -> json key take_profit
	if c.TakeProfit != nil {
		TakeProfit := *c.TakeProfit

		// TEMPLATE check-required
		// END TEMPLATE check-required

		// assign parameter of TakeProfit
		params["take_profit"] = TakeProfit
	} else {
	}
	// check StopLoss field -> json key stop_loss
	if c.StopLoss != nil {
		StopLoss := *c.StopLoss

		// TEMPLATE check-required
		// END TEMPLATE check-required

		// assign parameter of StopLoss
		params["stop_loss"] = StopLoss
	} else {
	}
	// check PositionIntent field -> json key position_intent
	if c.PositionIntent != nil {
		PositionIntent := *c.PositionIntent

		// TEMPLATE check-required
		if len(PositionIntent) == 0 {
		}
		// END TEMPLATE check-required

		// TEMPLATE check-valid-values
		switch PositionIntent {
		case "buy_to_open", "buy_to_close", "sell_to_open", "sell_to_close":
			params["position_intent"] = PositionIntent

		default:
			return nil, fmt.Errorf("position_intent value %v is invalid", PositionIntent)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of PositionIntent
		params["position_intent"] = PositionIntent
	} else {
	}
	// check AdvancedInstructions field -> json key advanced_instructions
	if c.AdvancedInstructions != nil {
		AdvancedInstructions := *c.AdvancedInstructions

		// TEMPLATE check-required
		// END TEMPLATE check-required

		// assign parameter of AdvancedInstructions
		params["advanced_instructions"] = AdvancedInstructions
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (c *CreateOrderRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := c.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if c.isVarSlice(_v) {
			c.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (c *CreateOrderRequest) GetParametersJSON() ([]byte, error) {
	params, err := c.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (c *CreateOrderRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (c *CreateOrderRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (c *CreateOrderRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (c *CreateOrderRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (c *CreateOrderRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := c.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (c *CreateOrderRequest) GetPath() string {
	return "/v2/orders"
}

// Do generates the request object and send the request object to the API endpoint
func (c *CreateOrderRequest) Do(ctx context.Context) (*Order, error) {

	params, err := c.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = c.GetPath()

	req, err := c.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := c.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse Order

	type responseUnmarshaler interface {
		Unmarshal(data []byte) error
	}

	if unmarshaler, ok := interface{}(&apiResponse).(responseUnmarshaler); ok {
		if err := unmarshaler.Unmarshal(response.Body); err != nil {
			return nil, err
		}
	} else {
		// The line below checks the content type, however, some API server might not send the correct content type header,
		// Hence, this is commented for backward compatibility
		// response.IsJSON()
		if err := response.DecodeJSON(&apiResponse); err != nil {
			return nil, err
		}
	}

	type responseValidator interface {
		Validate() error
	}

	if validator, ok := interface{}(&apiResponse).(responseValidator); ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
